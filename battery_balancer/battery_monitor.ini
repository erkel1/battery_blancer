; Battery Monitor Configuration File (battery_monitor.ini)
; Updated as of August 21, 2025.
; This INI file configures the combined battery temperature monitoring and balancing script for a 3s8p battery system (3 series-connected parallel battery banks, each with 8 cells).
; It merges settings from the original balancer and temperature scripts, with temperature-specific params in [Temp] and shared/general in [General].
; Sections:
; - [Temp]: Settings for temperature monitoring via Modbus over TCP (Lantronix EDS4100 device with NTC sensors).
; - [General]: Shared settings for balancing, polling, voltage thresholds, alarms, etc.
; - [I2C]: Addresses for I2C devices (multiplexer for channel select, ADC for voltage, relays for balancing).
; - [GPIO]: GPIO pins on Raspberry Pi for DC-DC converter control and alarm relay.
; - [Email]: Settings for SMTP email alerts on critical voltage/temp issues (throttled to prevent spam).
; - [ADC]: Configuration registers and bitmasks for the ADS1115 ADC (advanced; rarely change).
; - [Calibration]: Per-sensor calibration multipliers for voltage readings (tune based on measured vs actual).

; Usage Notes:
; - All values have fallbacks in the script, so missing keys use defaults (listed below).
; - Types: string (text), integer (whole number), float (decimal, e.g., 0.1).
; - Thresholds: Tune to your battery type (e.g., LiFePO4: ~3.0-3.65V per cell, temps <60°C high, >0°C low).
; - For temps: 24 channels (8 per bank), scaling_factor assumes raw * scaling = °C (e.g., 100 for 0.01°C units).
; - For voltages: 3 banks, divider ratio = R2/(R1+R2) from circuit.
; - Email: Use app-specific password if 2FA enabled; test SMTP separately.
; - Logging: Set level in [General] (DEBUG for verbose, INFO default).
; - Changes require script restart; validate hardware matches (e.g., I2C addresses).
; - Script warns if NumberOfBatteries != 3 (hardcoded NUM_BANKS).

[Temp]
; ip: IP address of the Lantronix EDS4100 device for Modbus TCP connection to read NTC sensors.
; Type: string (IPv4 format).
; Default: '192.168.15.240' (example local IP; replace with your device's actual IP).
ip = 192.168.15.240

; port: TCP port on the EDS4100 for Modbus RTU tunneling (must match device config for serial port).
; Type: integer.
; Default: 10001 (common for EDS4100 port 1; ensure tunneling enabled).
port = 10001

; poll_interval: Interval in seconds between temperature (and voltage) polls.
; Type: float.
; Default: 10.0 (balances responsiveness and network/CPU load; script uses min with SleepTimeBetweenChecks).
poll_interval = 10.0

; rise_threshold: Max allowable temperature rise (°C) per poll interval for a channel before abnormal rise alert.
; Type: float.
; Default: 2.0 (detects rapid heating, e.g., faults; tune based on expected rates during use).
rise_threshold = 2.0

; deviation_threshold: Relative deviation from current bank median (fraction, e.g., 0.1 = 10%) for deviation alert.
; Type: float.
; Default: 0.1 (complements abs_deviation_threshold; detects outliers in pack).
deviation_threshold = 0.1

; disconnection_lag_threshold: Max deviation (°C) of channel's rise from bank median rise for lag/disconnection alert.
; Type: float.
; Default: 0.5 (detects sensors not tracking pack, e.g., poor contact or fault).
disconnection_lag_threshold = 0.5

; high_threshold: Temperature (°C) above which high temp alert/risk (per channel).
; Type: float.
; Default: 60.0 (lithium batteries can damage above this; adjust for your chemistry/env).
high_threshold = 60.0

; low_threshold: Temperature (°C) below which low temp alert (per channel).
; Type: float.
; Default: 0.0 (below freezing affects performance; set negative if sub-zero expected).
low_threshold = 0.0

; scaling_factor: Divide raw Modbus register values by this to get °C (e.g., if raw=2500 for 25°C, use 100).
; Type: float.
; Default: 100.0 (common for scaled NTC readings; verify with known temp).
scaling_factor = 100.0

; valid_min: Min valid temperature (°C); ≤ this is invalid (e.g., disconnected, alerts as such).
; Type: float.
; Default: 0.0 (assumes no sub-zero; adjust if needed).
valid_min = 0.0

; max_retries: Max retry attempts for failed temp reads (network errors/timeouts).
; Type: integer.
; Default: 3 (with exponential backoff for recovery).
max_retries = 3

; retry_backoff_base: Base for exponential retry delays (e.g., base=2: 1s, 2s, 4s).
; Type: integer.
; Default: 1 (linear retries; increase for slower backoff).
retry_backoff_base = 1

; query_delay: Delay (seconds) after Modbus query send before response read.
; Type: float.
; Default: 0.25 (device processing time; increase if timeouts occur).
query_delay = 0.25

; num_channels: Number of temperature channels/sensors (must match hardware, 24 for 3 banks x 8).
; Type: integer.
; Default: 24.
num_channels = 24

; abs_deviation_threshold: Absolute deviation (°C) from bank median for alert.
; Type: float.
; Default: 2.0 (complements relative; for absolute outliers).
abs_deviation_threshold = 2.0

[General]
; NumberOfBatteries: Number of banks (must be 3 for 3s8p; script warns/uses 3 if mismatch).
; Type: integer.
; Default: 3.
NumberOfBatteries = 3

; VoltageDifferenceToBalance: Min voltage difference (V) between max/min banks to trigger balancing.
; Type: float.
; Default: 0.1 (small for fine balance; increase to 0.2 for less frequent).
VoltageDifferenceToBalance = 0.1

; BalanceDurationSeconds: Time (seconds) for each balancing session when triggered.
; Type: integer.
; Default: 5 (short to prevent over-balance; monitor current/heat).
BalanceDurationSeconds = 5

; SleepTimeBetweenChecks: Interval (seconds) between polls (min with poll_interval).
; Type: float.
; Default: 0.1 (fast for testing; increase to 5.0+ for production to reduce load).
SleepTimeBetweenChecks = 0.1

; BalanceRestPeriodSeconds: Min rest (seconds) after balancing before next possible.
; Type: integer.
; Default: 60 (allows stabilization; 60-300 typical).
BalanceRestPeriodSeconds = 60

; LowVoltageThresholdPerBattery: Low voltage alarm threshold (V) per bank.
; Type: float.
; Default: 18.5 (for 5S LiFePO4 ~2.8V/cell x5=14V, but adjust; script uses per-bank).
LowVoltageThresholdPerBattery = 18.5

; HighVoltageThresholdPerBattery: High voltage alarm threshold (V) per bank.
; Type: float.
; Default: 21.0 (for 5S LiFePO4 ~3.6V/cell x5=18V, but adjust).
HighVoltageThresholdPerBattery = 21.0

; EmailAlertIntervalSeconds: Min time (seconds) between emails to avoid flooding.
; Type: integer.
; Default: 3600 (1 hour; was 300, increased for alarms).
EmailAlertIntervalSeconds = 3600

; I2C_BusNumber: I2C bus on Raspberry Pi (1 typical).
; Type: integer.
; Default: 1.
I2C_BusNumber = 1

; VoltageDividerRatio: Ratio for voltage divider: measured = real * ratio (R2/(R1+R2)).
; Type: float.
; Default: 0.01592 (calculate from resistors; verify with multimeter).
VoltageDividerRatio = 0.01592

; LoggingLevel: Logging verbosity (DEBUG, INFO, WARNING, ERROR, CRITICAL).
; Type: string.
; Default: INFO (balances detail and file size).
LoggingLevel = INFO

[I2C]
; MultiplexerAddress: Hex address of TCA9548A multiplexer for channel switching.
; Type: hex integer (e.g., 0x70).
; Default: 0x70.
MultiplexerAddress = 0x70

; VoltageMeterAddress: Hex address of ADS1115 ADC for voltage reads.
; Type: hex integer.
; Default: 0x49 (changed from 0x48 if hardware differs).
VoltageMeterAddress = 0x49

; RelayAddress: Hex address of PCA9536 or similar relay expander.
; Type: hex integer.
; Default: 0x26 (updated from 0x10 per revised).
RelayAddress = 0x26

[Email]
; SMTP_Server: SMTP server for alerts (e.g., smtp.gmail.com).
; Type: string.
; Default: smtp.gmail.com (use your provider).
SMTP_Server = smtp.gmail.com

; SMTP_Port: Port for SMTP (587 TLS, 465 SSL).
; Type: integer.
; Default: 587.
SMTP_Port = 587

; SenderEmail: From address for alerts.
; Type: string.
; Default: your_email@gmail.com (replace).
SenderEmail = your_email@gmail.com

; RecipientEmail: To address for alerts.
; Type: string.
; Default: recipient@example.com (replace).
RecipientEmail = recipient@example.com

# Note: For Gmail, use app-specific password if 2FA enabled (not stored here for security; script assumes it's set in code or env if needed).
; SMTP_User and SMTP_Password from original not in script; add if implementing login.

[ADC]
; ConfigRegister: ADC config register address (hex).
; Type: hex integer.
; Default: 0x01.
ConfigRegister = 0x01

; ConversionRegister: ADC conversion result register (hex).
; Type: hex integer.
; Default: 0x00.
ConversionRegister = 0x00

; ContinuousModeConfig: Bits for continuous/single-shot mode (hex).
; Type: hex integer.
; Default: 0x0100 (single-shot for power saving).
ContinuousModeConfig = 0x0100

; SampleRateConfig: Bits for sample rate (hex, e.g., 0x0080 = 128 SPS).
; Type: hex integer.
; Default: 0x0080.
SampleRateConfig = 0x0080

; GainConfig: Bits for gain/voltage range (hex, e.g., 0x0400 = ±2.048V).
; Type: hex integer.
; Default: 0x0400.
GainConfig = 0x0400

[Calibration]
; Sensor1_Calibration: Multiplier for bank 1 voltage accuracy (actual/measured).
; Type: float.
; Default: 0.99856 (tune with known voltage source).
Sensor1_Calibration = 0.99856

; Sensor2_Calibration: Multiplier for bank 2.
; Type: float.
; Default: 0.99856.
Sensor2_Calibration = 0.99856

; Sensor3_Calibration: Multiplier for bank 3.
; Type: float.
; Default: 0.99809.
Sensor3_Calibration = 0.99809