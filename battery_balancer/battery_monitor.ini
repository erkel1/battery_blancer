; --------------------------------------------------------------------------------
; Battery Management System (BMS) Configuration File Documentation
; --------------------------------------------------------------------------------
; 
; **File Name:** battery_monitor.ini
; **Version:** 1.0 (As of August 24, 2025)
; **Purpose:** This INI file contains all configurable settings for the bms.py script. It allows customization of temperature thresholds, voltage limits, hardware addresses, email alerts, and more without changing the code. Settings are organized into sections (e.g., [Temp]) for clarity. If a key is missing, the script uses defaults from the code.
; 
; **Detailed Overview for Non-Programmers:**
; - This file is like a settings menu for the BMS script. Each line is a "key = value" pair, where "key" is the setting name, and "value" is what you set it to.
; - Comments start with ";" – they explain what each setting does. You can copy this file as-is and edit the values (e.g., change IP or thresholds).
; - Sections are in [square brackets] – group related settings.
; - Values: Numbers (e.g., 10.0 for floats, 3 for integers), text (e.g., '192.168.15.240'), booleans (True/False – case-sensitive, no quotes).
; - Defaults: If you omit a key, the script uses built-in defaults (listed in comments).
; - Tips: Use a text editor (e.g., nano on Raspberry Pi). After editing, restart the script. For emails, use an "app password" if using Gmail (generate in Google settings).
; - Security: Don't share this file if it has passwords. For web auth, set strong username/password.
; 
; **How to Use (Step-by-Step):**
; 1. Create this file in the same folder as bms.py.
; 2. Copy the content below.
; 3. Edit values as needed (e.g., change IP to match your Lantronix device).
; 4. Save and run the script: sudo python bms.py.
; 5. If errors, check logs for "config" issues.
; 
; **Section Explanations:**
; - [Temp]: Temperature sensor settings (NTC via Modbus).
; - [General]: Overall system behavior (balancing, alerts, etc.).
; - [I2C]: Hardware addresses for I2C devices.
; - [GPIO]: Raspberry Pi pin numbers.
; - [Email]: Alert email setup.
; - [ADC]: Voltage ADC configurations (advanced, rarely change).
; - [Calibration]: Fine-tune voltage readings.
; - [Startup]: Self-test parameters.
; - [Web]: Dashboard and API settings.
; 
; **Notes & Troubleshooting:**
; - Booleans: Use "True" or "False" (capital T/F, no quotes).
; - Numbers: Floats have decimals (e.g., 0.1), integers don't (e.g., 3).
; - Hex Values: For addresses, like 0x70 (starts with 0x).
; - If script fails to load, check for typos or missing sections.
; - Customize thresholds based on your battery type (e.g., LiFePO4: adjust voltage limits).
; 
; --------------------------------------------------------------------------------
; Configuration Begins Below - With Line-by-Line Comments
; --------------------------------------------------------------------------------

[Temp]
; Settings for temperature monitoring via NTC sensors and Modbus.
; ip: IP address of the Lantronix EDS4100 device (network address for sensor communication). Default: '192.168.15.240'.
ip = 192.168.15.240
; modbus_port: Network port for Modbus TCP (like a specific channel on the device). Default: 10001.
modbus_port = 10001
; poll_interval: Seconds between temperature reads (how often to check sensors). Default: 10.0.
poll_interval = 10.0
; rise_threshold: Maximum allowed temperature rise per poll interval (°C). If exceeded, alerts for abnormal rise. Default: 2.0.
rise_threshold = 2.0
; deviation_threshold: Maximum relative deviation from bank median (as fraction, e.g., 0.1 = 10%). Alerts if sensor differs too much. Default: 0.1.
deviation_threshold = 0.1
; disconnection_lag_threshold: Maximum difference in change rate from bank median (°C). Alerts for lag/disconnection. Default: 0.5.
disconnection_lag_threshold = 0.5
; high_threshold: Maximum safe temperature (°C). Alerts if any sensor exceeds. Default: 42.0 (adjust for your battery specs).
high_threshold = 42.0
; low_threshold: Minimum safe temperature (°C). Alerts if below (not used for heating mode). Default: 0.0.
low_threshold = 0.0
; scaling_factor: Factor to convert raw sensor data to °C (divide raw by this). Sensor-specific. Default: 100.0.
scaling_factor = 100.0
; valid_min: Minimum valid reading (°C). Below = invalid/disconnected sensor. Default: 0.0.
valid_min = 0.0
; max_retries: Number of retry attempts for failed Modbus reads. Default: 3.
max_retries = 3
; retry_backoff_base: Base for exponential retry delays (seconds: 1, 2, 4...). Default: 1.
retry_backoff_base = 1
; query_delay: Seconds to wait after sending Modbus query before reading response. Default: 0.25.
query_delay = 0.25
; num_channels: Number of temperature sensors (fixed for 3s8p: 24). Default: 24.
num_channels = 24
; abs_deviation_threshold: Maximum absolute deviation from bank median (°C). Alerts if exceeded. Default: 2.0.
abs_deviation_threshold = 2.0
; cabinet_over_temp_threshold: Temperature (°C) above which the fan turns on (based on overall median temp). Default: 35.0.
cabinet_over_temp_threshold = 35.0

[General]
; General system and balancing settings.
; NumberOfBatteries: Number of series banks (fixed at 3 for 3s8p). Default: 3.
NumberOfBatteries = 3
; VoltageDifferenceToBalance: Minimum voltage difference (V) between banks to trigger balancing. Default: 0.1.
VoltageDifferenceToBalance = 0.1
; BalanceDurationSeconds: Duration of each balancing cycle (seconds). Default: 5.
BalanceDurationSeconds = 5
; SleepTimeBetweenChecks: Short delay in main loop (seconds) for CPU relief. Default: 0.1.
SleepTimeBetweenChecks = 0.1
; BalanceRestPeriodSeconds: Minimum wait after balancing before next cycle (seconds). Default: 60.
BalanceRestPeriodSeconds = 60
; LowVoltageThresholdPerBattery: Minimum safe voltage per bank (V). Alerts if below. Default: 18.5.
LowVoltageThresholdPerBattery = 18.5
; HighVoltageThresholdPerBattery: Maximum safe voltage per bank (V). Alerts if above. Default: 21.0.
HighVoltageThresholdPerBattery = 21.0
; EmailAlertIntervalSeconds: Minimum time between email alerts (seconds, e.g., 3600=1hr). Default: 3600.
EmailAlertIntervalSeconds = 3600
; I2C_BusNumber: I2C bus on Raspberry Pi (usually 1). Default: 1.
I2C_BusNumber = 1
; VoltageDividerRatio: Ratio for voltage measurement circuit (ADC to real V). Hardware-specific. Default: 0.01592.
VoltageDividerRatio = 0.01592
; LoggingLevel: Detail level for logs (INFO=normal, DEBUG=detailed, ERROR=only issues). Default: 'INFO'.
LoggingLevel = INFO
; WebInterfaceEnabled: Enable web dashboard (True/False). Default: True.
WebInterfaceEnabled = True
; StartupSelfTestEnabled: Run hardware/config tests at startup (True/False). Default: True.
StartupSelfTestEnabled = True
; WatchdogEnabled: Use hardware watchdog to prevent freezes (True/False). Default: True.
WatchdogEnabled = False

[I2C]
; I2C device addresses (in hex, e.g., 0x70).
; MultiplexerAddress: Address of TCA9548A I2C multiplexer. Default: 0x70.
MultiplexerAddress = 0x70
; VoltageMeterAddress: Address of ADS1115 ADC for voltages. Default: 0x49.
VoltageMeterAddress = 0x49
; RelayAddress: Address of relay controller for balancing. Default: 0x26.
RelayAddress = 0x26

[GPIO]
; GPIO pin settings on Raspberry Pi (BCM numbering).
; DC_DC_RelayPin: Pin controlling DC-DC converter relay. Default: 5 (changed from 17 in your provided INI).
DC_DC_RelayPin = 5
; AlarmRelayPin: Pin for alarm relay (buzzer/LED). Default: 6 (changed from 27).
AlarmRelayPin = 6
; FanRelayPin: Pin controlling fan relay (on if cabinet temp > threshold). Default: 4.
FanRelayPin = 4

[Email]
; Email alert settings for notifications.
; SMTP_Server: Email server address (e.g., Gmail). Default: 'smtp.gmail.com'.
SMTP_Server = smtp.gmail.com
; SMTP_Port: Server port (587 for TLS). Default: 587.
SMTP_Port = 587
; SenderEmail: From email address. Default: 'your_email@gmail.com' (replace with yours).
SenderEmail = your_email@gmail.com
; RecipientEmail: To email address for alerts. Default: 'recipient@example.com' (replace).
RecipientEmail = recipient@example.com
; SMTP_Username: Login username (usually same as SenderEmail). Default: 'your_email@gmail.com'.
SMTP_Username = your_email@gmail.com
; SMTP_Password: App-specific password (not regular password for security). Default: 'your_app_password' (generate in email provider settings).
SMTP_Password = your_app_password

[ADC]
; Advanced ADC (ADS1115) configuration registers (hex values, rarely change).
; ConfigRegister: Register for ADC config. Default: 0x01.
ConfigRegister = 0x01
; ConversionRegister: Register for reading conversions. Default: 0x00.
ConversionRegister = 0x00
; ContinuousModeConfig: Setting for continuous mode. Default: 0x0100.
ContinuousModeConfig = 0x0100
; SampleRateConfig: Sample rate setting. Default: 0x0080.
SampleRateConfig = 0x0080
; GainConfig: Gain amplifier setting. Default: 0x0400.
GainConfig = 0x0400

[Calibration]
; Voltage calibration factors (close to 1.0, fine-tune based on measurements).
; Sensor1_Calibration: Multiplier for bank 1 voltage accuracy. Default: 0.99856.
Sensor1_Calibration = 0.99856
; Sensor2_Calibration: For bank 2. Default: 0.99856.
Sensor2_Calibration = 0.99856
; Sensor3_Calibration: For bank 3. Default: 0.99809.
Sensor3_Calibration = 0.99809

[Startup]
; Settings for startup self-test.
; test_balance_duration: Balancing time during test (seconds). Default: 15.
test_balance_duration = 15
; min_voltage_delta: Minimum voltage change to confirm balancing works (V). Default: 0.01.
min_voltage_delta = 0.01
; test_read_interval: Interval between voltage reads during test (seconds). Default: 2.0.
test_read_interval = 2.0

[Web]
; Web dashboard and API settings.
; host: IP to listen on (0.0.0.0 = all). Default: '0.0.0.0'.
host = 0.0.0.0
; web_port: Port for web access (e.g., 8080). Default: 8080.
web_port = 8080
; auth_required: Require username/password for web (True/False). Default: False.
auth_required = False
; username: Web login username. Default: 'admin'.
username = admin
; password: Web login password. Default: 'admin123' (change to strong password).
password = admin123
; api_enabled: Enable API endpoints (True/False). Default: True.
api_enabled = True
; cors_enabled: Enable CORS for cross-origin requests (True/False). Default: False.
cors_enabled = False
; cors_origins: Allowed origins for CORS (* = all). Default: '*'.
cors_origins = *